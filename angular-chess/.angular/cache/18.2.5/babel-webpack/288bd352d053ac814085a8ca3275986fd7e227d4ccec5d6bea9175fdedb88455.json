{"ast":null,"code":"import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\nclass MaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n      const x = str.split(decimalChar);\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0];\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n      const rgx = /(\\d+)(\\d{3})/;\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n      return res + decimals.substr(0, precision + 1);\n    };\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n      return Infinity;\n    };\n    this.checkAndRemoveSuffix = inputValue => {\n      var _a, _b, _c;\n      for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n      return inputValue;\n    };\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          const diff = precisionMatch[0].length - 1 - precision;\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n        if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n      return inputValue;\n    };\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    const inputArray = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      this.ipError = !!(inputArray.filter(i => i === '.').length < 3 && inputArray.length < 7);\n      maskExpression = '099.099.099.099';\n    }\n    const arr = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i].match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n      if (arr.length > 11) {\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        inputValue = this._stripToDecimal(inputValue);\n      }\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue;\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n      const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n      const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n      const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n      if (inputValue.match(invalidCharRegexp)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n      const precision = this.getPrecision(maskExpression);\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n      // tslint:disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/');\n            // 10<day<31 && month<12 for input\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n    if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    let newPosition = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n  _findSpecialChar(inputSymbol) {\n    return this.maskSpecialCharacters.find(val => val === inputSymbol);\n  }\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n  _charToRegExpExpression(char) {\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n    return char;\n  }\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n}\nMaskApplierService.decorators = [{\n  type: Injectable\n}];\nMaskApplierService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}];\nclass MaskService extends MaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.maskExpression = '';\n    this.isNumberValue = false;\n    this.placeHolderCharacter = '_';\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.onChange = _ => {};\n  }\n  // tslint:disable-next-line:cyclomatic-complexity\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n    if (this.hiddenInput && !this.writingValue) {\n      let actualResult = this.actualValue.split('');\n      // tslint:disable no-unused-expression\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      // tslint:enable no-unused-expression\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => item !== this.decimalMarker);\n    }\n    this.formControlResult(result);\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n    return result + prefNmask.slice(resLen);\n  }\n  // get the number of characters that were shifted\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n  applyValueChanges(position = 0, justPasted, backspaced, cb = () => {}) {\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.maskAvailablePatterns && this.maskAvailablePatterns[maskExpression[index]] && this.maskAvailablePatterns[maskExpression[index]].symbol) {\n        return this.maskAvailablePatterns[maskExpression[index]].symbol;\n      }\n      return curr;\n    }).join('');\n  }\n  // this function is not necessary, it checks result against maskExpression\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) || this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]);\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef.nativeElement;\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n  set formElementProperty([name, value]) {\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    if (inputVal === '#') {\n      return cpf;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  formControlResult(inputValue) {\n    if (this.writingValue || this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n    let separatorValue = this._retrieveSeparatorValue(result);\n    if (this.decimalMarker !== '.') {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  }\n  // TODO should think about helpers or separting decimal precision to own property\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\nMaskService.decorators = [{\n  type: Injectable\n}];\nMaskService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: Renderer2\n}];\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass MaskDirective {\n  constructor(document, _maskService, _config) {\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config;\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    this.onChange = _ => {};\n    this.onTouch = () => {};\n  }\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime\n    } = changes;\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n      this._maskValue = maskExpression.currentValue || '';\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._maskValue = this._maskExpressionArray[0];\n        this.maskExpression = this._maskExpressionArray[0];\n        this._maskService.maskExpression = this._maskExpressionArray[0];\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n      }\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    this._applyMask();\n  }\n  // tslint:disable-next-line: cyclomatic-complexity\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (this._maskService.maskAvailablePatterns[key].optional && this._maskService.maskAvailablePatterns[key].optional === true) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    return null;\n  }\n  onPaste() {\n    this._justPasted = true;\n  }\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    });\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n  onFocus(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n    // tslint:disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n    if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n    if (el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n  // tslint:disable-next-line: cyclomatic-complexity\n  onKeyDown(e) {\n    var _a;\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, this.prefix.length);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n            }\n          }\n          this.suffixCheckOnPressDelete(e.keyCode, el);\n        }\n      }\n      this.suffixCheckOnPressDelete(e.keyCode, el);\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      const cursorStart = el.selectionStart;\n      // this.onFocus(e);\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey === true ||\n    // Ctrl+ A\n    e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n  writeValue(inputValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n        if ('disable' in inputValue) {\n          this.setDisabledState(Boolean(inputValue.disable));\n        }\n        inputValue = inputValue.value;\n      }\n      if (inputValue === undefined) {\n        inputValue = '';\n      }\n      if (typeof inputValue === 'number') {\n        inputValue = String(inputValue);\n        inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n        this._maskService.isNumberValue = true;\n      }\n      this._inputValue = inputValue;\n      this._setMask();\n      if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n        // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n        this._maskService.writingValue = true;\n        this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)];\n        // Let the service know we've finished writing value\n        this._maskService.writingValue = false;\n      } else {\n        this._maskService.formElementProperty = ['value', inputValue];\n      }\n      this._inputValue = inputValue;\n    });\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  suffixCheckOnPressDelete(keyCode, el) {\n    if (keyCode === 46 && this.suffix.length > 0) {\n      if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n    }\n    if (keyCode === 8) {\n      if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n      if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n        el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n      }\n    }\n  }\n  /** It disables the input element */\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currval, index) => {\n      this._start = currval === '{' ? index : this._start;\n      if (currval !== '}') {\n        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n      }\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  }\n  // tslint:disable-next-line:no-any\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n    if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n    return null;\n  }\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        var _a, _b;\n        const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n}\nMaskDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'input[mask], textarea[mask]',\n    providers: [{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    }, MaskService]\n  }]\n}];\nMaskDirective.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MaskService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}];\nMaskDirective.propDecorators = {\n  maskExpression: [{\n    type: Input,\n    args: ['mask']\n  }],\n  specialCharacters: [{\n    type: Input\n  }],\n  patterns: [{\n    type: Input\n  }],\n  prefix: [{\n    type: Input\n  }],\n  suffix: [{\n    type: Input\n  }],\n  thousandSeparator: [{\n    type: Input\n  }],\n  decimalMarker: [{\n    type: Input\n  }],\n  dropSpecialCharacters: [{\n    type: Input\n  }],\n  hiddenInput: [{\n    type: Input\n  }],\n  showMaskTyped: [{\n    type: Input\n  }],\n  placeHolderCharacter: [{\n    type: Input\n  }],\n  shownMaskExpression: [{\n    type: Input\n  }],\n  showTemplate: [{\n    type: Input\n  }],\n  clearIfNotMatch: [{\n    type: Input\n  }],\n  validation: [{\n    type: Input\n  }],\n  separatorLimit: [{\n    type: Input\n  }],\n  allowNegativeNumbers: [{\n    type: Input\n  }],\n  leadZeroDateTime: [{\n    type: Input\n  }],\n  onPaste: [{\n    type: HostListener,\n    args: ['paste']\n  }],\n  onInput: [{\n    type: HostListener,\n    args: ['input', ['$event']]\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }],\n  onFocus: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\nclass MaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n  }\n  transform(value, mask, thousandSeparator = null) {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\nMaskPipe.decorators = [{\n  type: Pipe,\n  args: [{\n    name: 'mask',\n    pure: true\n  }]\n}];\nMaskPipe.ctorParameters = () => [{\n  type: MaskApplierService\n}];\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: config,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, MaskApplierService]\n    };\n  }\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n}\nNgxMaskModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe]\n  }]\n}];\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"names":["InjectionToken","Injectable","Inject","ElementRef","Renderer2","Directive","forwardRef","Input","HostListener","Pipe","NgModule","__awaiter","NG_VALUE_ACCESSOR","NG_VALIDATORS","DOCUMENT","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","patterns","pattern","RegExp","optional","X","symbol","A","S","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","constructor","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","length","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","_a","_b","_c","i","includes","checkInputPrecision","precisionRegEx","_charToRegExpExpression","precisionMatch","match","diff","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","arr","push","cpfCnpjError","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","find","val","maskSymbol","idx","join","charsToEscape","inputLength","decorators","type","ctorParameters","args","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","value","regex","exec","applyValueChanges","formElement","nativeElement","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","removeMask","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","Array","isArray","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","onPaste","onInput","e","el","target","_inputValue","_setMask","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onFocus","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","String","registerOnChange","fn","registerOnTouched","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","some","selector","providers","provide","useExisting","propDecorators","MaskPipe","transform","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","exports","declarations","initConfig","Function","Object","assign","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"sources":["/Users/sumegizoltan/github/_uj/AngularChess/angular-chess/node_modules/ngx-mask/fesm2015/ngx-mask.js"],"sourcesContent":["import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: '.',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n            const x = str.split(decimalChar);\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0];\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            var _a, _b, _c;\n            for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n                const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n                if (inputValue.includes(substr) &&\n                    (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    const diff = precisionMatch[0].length - 1 - precision;\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i].match('\\\\d')) {\n                arr.push(inputValue[i]);\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n            if (arr.length > 11) {\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            inputValue =\n                inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker && !backspaced\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n            const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n                .replace(thousandSeperatorCharEscaped, '')\n                .replace(decimalMarkerEscaped, '');\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00') {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            return (i.match('^-?\\\\d') ||\n                i.match('\\\\s') ||\n                i === '.' ||\n                i === ',' ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n}\nMaskApplierService.decorators = [\n    { type: Injectable }\n];\nMaskApplierService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.onChange = (_) => { };\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue = '';\n        if (this.hiddenInput && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // tslint:disable no-unused-expression\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            // tslint:enable no-unused-expression\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => item !== this.decimalMarker);\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position = 0, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split('')\n            .filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask.split('').filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || this.maskChanged) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.') {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.decorators = [\n    { type: Injectable }\n];\nMaskService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            this._maskValue = maskExpression.currentValue || '';\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._maskValue = this._maskExpressionArray[0];\n                this.maskExpression = this._maskExpressionArray[0];\n                this._maskService.maskExpression = this._maskExpressionArray[0];\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onFocus(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown(e) {\n        var _a;\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length)\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, this.prefix.length);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) &&\n                            ((this.prefix.length >= 1 && el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n                        }\n                    }\n                    this.suffixCheckOnPressDelete(e.keyCode, el);\n                }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n            (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                }\n                inputValue = inputValue.value;\n            }\n            if (inputValue === undefined) {\n                inputValue = '';\n            }\n            if (typeof inputValue === 'number') {\n                inputValue = String(inputValue);\n                inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                this._maskService.isNumberValue = true;\n            }\n            this._inputValue = inputValue;\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                this._maskService.writingValue = true;\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                this._maskService.writingValue = false;\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        });\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    suffixCheckOnPressDelete(keyCode, el) {\n        if (keyCode === 46 && this.suffix.length > 0) {\n            if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n        }\n        if (keyCode === 8) {\n            if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n            }\n        }\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // tslint:disable-next-line:no-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue.split('').filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                var _a, _b;\n                const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                }\n            });\n        }\n    }\n}\nMaskDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[mask], textarea[mask]',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true,\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true,\n                    },\n                    MaskService,\n                ],\n            },] }\n];\nMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: MaskService },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nMaskDirective.propDecorators = {\n    maskExpression: [{ type: Input, args: ['mask',] }],\n    specialCharacters: [{ type: Input }],\n    patterns: [{ type: Input }],\n    prefix: [{ type: Input }],\n    suffix: [{ type: Input }],\n    thousandSeparator: [{ type: Input }],\n    decimalMarker: [{ type: Input }],\n    dropSpecialCharacters: [{ type: Input }],\n    hiddenInput: [{ type: Input }],\n    showMaskTyped: [{ type: Input }],\n    placeHolderCharacter: [{ type: Input }],\n    shownMaskExpression: [{ type: Input }],\n    showTemplate: [{ type: Input }],\n    clearIfNotMatch: [{ type: Input }],\n    validation: [{ type: Input }],\n    separatorLimit: [{ type: Input }],\n    allowNegativeNumbers: [{ type: Input }],\n    leadZeroDateTime: [{ type: Input }],\n    onPaste: [{ type: HostListener, args: ['paste',] }],\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onFocus: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'mask',\n                pure: true,\n            },] }\n];\nMaskPipe.ctorParameters = () => [\n    { type: MaskApplierService }\n];\n\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MaskDirective, MaskPipe],\n                declarations: [MaskDirective, MaskPipe],\n            },] }\n];\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}