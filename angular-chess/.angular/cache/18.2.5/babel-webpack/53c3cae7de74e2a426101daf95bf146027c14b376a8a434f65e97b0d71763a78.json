{"ast":null,"code":"import { ChessBase } from \"./chess-base.\";\nimport { Figure } from \"./chess-figure\";\nexport class FigurePawn extends Figure {\n  constructor(color) {\n    super('pawn', color, 1, 2);\n  }\n  isStepPossible(step) {\n    let _retVal = false;\n    if (this.isCoordsNotEquals(step)) {\n      if (this.isDistancePossible(step)) {\n        if (this.isForwardStep(step)) {\n          if (this.isStepNotBlocked(step)) {\n            if (this.isOneCellStep(step) || this.isTwoCellStepFromOrig(step)) {\n              if (this.isLinearStep(step) && this.isStepNotBlockedByEnemy(step) || this.isDiagonalStep(step) && this.isPunchOrEnPassant(step)) {\n                _retVal = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return _retVal;\n  }\n  isForwardStep(step) {\n    let _retVal = false;\n    if (this.color === 'white' && step.from.y > step.to.y || this.color === 'black' && step.from.y < step.to.y) {\n      _retVal = true;\n    }\n    return _retVal;\n  }\n  isTwoCellStepFromOrig(step) {\n    return this.isLinearStep(step) && this.isOrigPosition(step) && this.isTwoCellStep(step);\n  }\n  isPunchOrEnPassant(step) {\n    return this.isPunch(step) || this.isEnPassant(step);\n  }\n  isPunch(step) {\n    let _retVal = false;\n    const base = ChessBase.instance;\n    const fig = base.getFigure(step.to.x, step.to.y);\n    if (fig && fig.color !== this.color) {\n      if (fig.name !== 'king' || base.isHitEnemyKingCanBeTested) {\n        _retVal = true;\n      }\n    }\n    return _retVal;\n  }\n  isEnPassant(step) {\n    let _retVal = false;\n    const base = ChessBase.instance;\n    const fig = base.getFigure(step.to.x, step.to.y);\n    if (!fig && base.enPassant) {\n      if (base.enPassant.to.x === step.to.x && base.enPassant.to.y === step.to.y) {\n        _retVal = true;\n      }\n    }\n    return _retVal;\n  }\n  isMovedToEnPassantPosition(step) {\n    let _retVal = false;\n    if (this.isTwoCellStepFromOrig(step)) {\n      const offsetY = step.to.y > step.from.y ? 1 : -1;\n      const base = ChessBase.instance;\n      const fig = base.getFigure(step.to.x, step.to.y + offsetY);\n      if (fig && fig.color !== this.color) {\n        const figInLeft = step.to.x > 0 ? base.getFigure(step.to.x - 1, step.to.y) : null;\n        const figInRight = step.to.x < 7 ? base.getFigure(step.to.x + 1, step.to.y) : null;\n        if (figInLeft && figInLeft.color !== this.color || figInRight && figInRight.color !== this.color) {\n          _retVal = true;\n        }\n      }\n    }\n    return _retVal;\n  }\n  isTwoCellStep(step) {\n    return this.color === 'white' && step.from.y - step.to.y === 2 || this.color === 'black' && step.to.y - step.from.y === 2;\n  }\n  isOrigPosition(step) {\n    return this.color === 'white' && step.from.y === 6 || this.color === 'black' && step.from.y === 1;\n  }\n  isStepNotBlockedByEnemy(step) {\n    let _retVal = true;\n    const fig = ChessBase.instance.getFigure(step.to.x, step.to.y);\n    if (fig && fig.color !== this.color) {\n      _retVal = false;\n    }\n    return _retVal;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}