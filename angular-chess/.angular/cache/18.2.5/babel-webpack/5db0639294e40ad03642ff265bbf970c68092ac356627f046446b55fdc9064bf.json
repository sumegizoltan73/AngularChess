{"ast":null,"code":"import { ChessBase } from \"./chess-base.\";\nimport { Figure } from \"./chess-figure\";\nexport class FigureKing extends Figure {\n  constructor(color) {\n    super('king', color, 2, 1);\n    this.isMoved = false;\n  }\n  isStepPossible(step) {\n    let _retVal = false;\n    if (this.isCoordsNotEquals(step)) {\n      if (this.isDistancePossible(step)) {\n        const isCastling = this.isCastling(step);\n        if (this.isOneCellStep(step) || isCastling) {\n          if (this.isStepNotBlocked(step) || isCastling) {\n            if (this.isStepNotBlockedByEnemyKnightRange(step)) {\n              _retVal = true;\n            }\n          }\n        }\n      }\n    }\n    return _retVal;\n  }\n  isOrigPosition(step) {\n    return !this.isMoved && (this.color === 'white' && step.from.y === 7 && step.from.x === 4 || this.color === 'black' && step.from.y === 0 && step.from.x === 4);\n  }\n  getRange(x, y) {\n    let _retVal = [];\n    // current row\n    if (x > 0) {\n      _retVal.push({\n        x: x - 1,\n        y: y\n      });\n    }\n    if (x < 7) {\n      _retVal.push({\n        x: x + 1,\n        y: y\n      });\n    }\n    // under\n    if (this.color === 'white' && y < 7 || this.color === 'black' && y > 0) {\n      const u = this.color === 'white' ? y + 1 : y - 1;\n      if (x > 0) {\n        _retVal.push({\n          x: x - 1,\n          y: u\n        });\n      }\n      _retVal.push({\n        x: x,\n        y: u\n      });\n      if (x < 7) {\n        _retVal.push({\n          x: x + 1,\n          y: u\n        });\n      }\n    }\n    // above\n    if (this.color === 'white' && y > 0 || this.color === 'black' && y < 7) {\n      const a = this.color === 'white' ? y - 1 : y + 1;\n      if (x > 0) {\n        _retVal.push({\n          x: x - 1,\n          y: a\n        });\n      }\n      _retVal.push({\n        x: x,\n        y: a\n      });\n      if (x < 7) {\n        _retVal.push({\n          x: x + 1,\n          y: a\n        });\n      }\n    }\n    return _retVal;\n  }\n  isCastling(step) {\n    // orig_pos && castling\n    let _retVal = false;\n    if (this.isOrigPosition(step)) {\n      const stepOffset = Math.abs(step.to.x - step.from.x);\n      const rookOffset = step.to.x > step.from.x ? 1 : -1;\n      const rookX = step.from.x + rookOffset;\n      const fig = ChessBase.instance.getFigure(rookX, step.from.y);\n      if (stepOffset === 2 && fig && fig.name === 'rook' && fig.color === this.color) {\n        _retVal = true;\n      }\n    }\n    return _retVal;\n  }\n  isStepNotBlockedByEnemyKnightRange(step) {\n    let _retVal = true;\n    const enemyColor = this.color === 'white' ? 'black' : 'white';\n    const cell = ChessBase.instance.getKingWithCell(enemyColor);\n    if (Math.abs(cell.x - step.to.x) <= 1 && Math.abs(cell.y - step.to.y) <= 1) {\n      _retVal = false;\n    }\n    return _retVal;\n  }\n}","map":{"version":3,"names":["ChessBase","Figure","FigureKing","constructor","color","isMoved","isStepPossible","step","_retVal","isCoordsNotEquals","isDistancePossible","isCastling","isOneCellStep","isStepNotBlocked","isStepNotBlockedByEnemyKnightRange","isOrigPosition","from","y","x","getRange","push","u","a","stepOffset","Math","abs","to","rookOffset","rookX","fig","instance","getFigure","name","enemyColor","cell","getKingWithCell"],"sources":["/Users/sumegizoltan/github/_uj/AngularChess/angular-chess/src/app/chess/chess-figure-king.ts"],"sourcesContent":["import { ChessBase } from \"./chess-base.\";\nimport { Figure } from \"./chess-figure\";\n\nexport class FigureKing extends Figure implements IFigure {\n\n    isMoved: boolean = false;\n    \n    constructor(color: string){\n        super('king', color, 2, 1);\n    }\n\n    isStepPossible(step: IStep): boolean {\n        let _retVal = false;\n\n        if (this.isCoordsNotEquals(step)) {\n            if (this.isDistancePossible(step)) {\n                const isCastling = this.isCastling(step);\n                \n                if (this.isOneCellStep(step) || isCastling) {\n                    if (this.isStepNotBlocked(step) || isCastling) {\n                        if (this.isStepNotBlockedByEnemyKnightRange(step)) {\n                            _retVal = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return _retVal;\n    }\n\n    isOrigPosition(step: IStep): boolean {\n        return !this.isMoved && ((this.color === 'white' && step.from!.y === 7 && step.from!.x === 4) \n                || (this.color === 'black' && step.from!.y === 0 && step.from!.x === 4));\n    }\n\n    getRange(x: number, y: number): ICord[] {\n        let _retVal: ICord[] = [];\n\n        // current row\n        if (x > 0) {\n            _retVal.push({ x: x - 1, y: y });\n        }\n        if (x < 7) {\n            _retVal.push({ x: x + 1, y: y });\n        }\n\n        // under\n        if (this.color === 'white' && y < 7 || this.color === 'black' && y > 0) {\n            const u = (this.color === 'white') ? y + 1 : y - 1;\n            if (x > 0) {\n                _retVal.push({ x: x - 1, y: u });\n            }\n            _retVal.push({ x: x, y: u });\n            if (x < 7) {\n                _retVal.push({ x: x + 1, y: u });\n            }\n        }\n\n        // above\n        if (this.color === 'white' && y > 0 || this.color === 'black' && y < 7) {\n            const a = (this.color === 'white') ? y - 1 : y + 1;\n            if (x > 0) {\n                _retVal.push({ x: x - 1, y: a });\n            }\n            _retVal.push({ x: x, y: a });\n            if (x < 7) {\n                _retVal.push({ x: x + 1, y: a });\n            }\n        }\n\n        return _retVal;\n    }\n\n    private isCastling(step: IStep): boolean {\n        // orig_pos && castling\n        let _retVal = false;\n\n        if (this.isOrigPosition(step)) {\n            const stepOffset = Math.abs(step.to!.x - step.from!.x);\n            const rookOffset = (step.to!.x > step.from!.x) ? 1 : -1;\n            const rookX = step.from!.x + rookOffset;\n            const fig = ChessBase.instance.getFigure(rookX, step.from!.y);\n            \n            if ((stepOffset === 2) && fig && fig.name === 'rook' && fig.color === this.color) {\n                _retVal = true;\n            }\n        } \n\n        return _retVal;\n    }\n\n    private isStepNotBlockedByEnemyKnightRange(step: IStep): boolean {\n        let _retVal = true;\n        const enemyColor = (this.color === 'white') ? 'black' : 'white';\n        const cell = ChessBase.instance.getKingWithCell(enemyColor);\n\n        if (Math.abs(cell.x - step.to!.x) <= 1 && Math.abs(cell.y - step.to!.y) <= 1) {\n            _retVal = false;\n        }\n        \n        return _retVal;\n    }\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}