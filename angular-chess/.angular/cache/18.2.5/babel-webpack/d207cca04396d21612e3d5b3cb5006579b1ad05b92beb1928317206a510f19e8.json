{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nclass TypifiedEventEmitter {\n  constructor(_type) {\n    this._type = _type;\n    this.type = _type;\n    this.eventEmitter = new EventEmitter();\n  }\n}\nexport class ChessEvents {\n  constructor() {\n    this.eventEmitterList = [];\n  }\n  subscribe(type, complete) {\n    let e = this.getEventEmitter(type);\n    if (!e) {\n      e = new TypifiedEventEmitter(type);\n      this.eventEmitterList.push(e);\n    }\n    e.eventEmitter.subscribe(complete);\n  }\n  emit(type, eventArgs) {\n    let e = this.getEventEmitter(type);\n    if (e) {\n      e.eventEmitter.emit(eventArgs);\n    }\n  }\n  getEventEmitter(type) {\n    let _retVal = undefined;\n    for (let i = 0; i < this.eventEmitterList.length; i++) {\n      const element = this.eventEmitterList[i];\n      if (element.type === type) {\n        _retVal = element;\n        break;\n      }\n    }\n    return _retVal;\n  }\n}","map":{"version":3,"names":["EventEmitter","TypifiedEventEmitter","constructor","_type","type","eventEmitter","ChessEvents","eventEmitterList","subscribe","complete","e","getEventEmitter","push","emit","eventArgs","_retVal","undefined","i","length","element"],"sources":["/Users/sumegizoltan/github/_uj/AngularChess/angular-chess/src/app/chess/chess.events.ts"],"sourcesContent":["import { EventEmitter } from \"@angular/core\";\n\nclass TypifiedEventEmitter {\n    type: string; \n    eventEmitter: EventEmitter<any>;\n\n    constructor(private _type: string) {\n        this.type = _type;\n        this.eventEmitter = new EventEmitter<any>();\n    }\n}\n\nexport class ChessEvents {\n\n    private eventEmitterList: TypifiedEventEmitter[] = [];\n\n    constructor(){\n\n    }\n\n    subscribe(type: string, complete: ((eventArgs?: any) => void)): void {\n        let e = this.getEventEmitter(type);\n        if (!e) {\n            e = new TypifiedEventEmitter(type);\n            this.eventEmitterList.push(e);\n        }\n\n        e.eventEmitter.subscribe(complete);\n    }\n\n    emit(type: string, eventArgs?: any): void {\n        let e = this.getEventEmitter(type);\n        if (e) {\n            e.eventEmitter.emit(eventArgs);\n        }\n    }\n\n    private getEventEmitter(type: string): TypifiedEventEmitter | undefined {\n        let _retVal = undefined;\n\n        for (let i = 0; i < this.eventEmitterList.length; i++) {\n            const element = this.eventEmitterList[i];\n            if (element.type === type) {\n                _retVal = element;\n                break;\n            }\n        }\n        return _retVal;\n    }\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAE5C,MAAMC,oBAAoB;EAItBC,YAAoBC,KAAa;IAAb,KAAAA,KAAK,GAALA,KAAK;IACrB,IAAI,CAACC,IAAI,GAAGD,KAAK;IACjB,IAAI,CAACE,YAAY,GAAG,IAAIL,YAAY,EAAO;EAC/C;;AAGJ,OAAM,MAAOM,WAAW;EAIpBJ,YAAA;IAFQ,KAAAK,gBAAgB,GAA2B,EAAE;EAIrD;EAEAC,SAASA,CAACJ,IAAY,EAAEK,QAAqC;IACzD,IAAIC,CAAC,GAAG,IAAI,CAACC,eAAe,CAACP,IAAI,CAAC;IAClC,IAAI,CAACM,CAAC,EAAE;MACJA,CAAC,GAAG,IAAIT,oBAAoB,CAACG,IAAI,CAAC;MAClC,IAAI,CAACG,gBAAgB,CAACK,IAAI,CAACF,CAAC,CAAC;IACjC;IAEAA,CAAC,CAACL,YAAY,CAACG,SAAS,CAACC,QAAQ,CAAC;EACtC;EAEAI,IAAIA,CAACT,IAAY,EAAEU,SAAe;IAC9B,IAAIJ,CAAC,GAAG,IAAI,CAACC,eAAe,CAACP,IAAI,CAAC;IAClC,IAAIM,CAAC,EAAE;MACHA,CAAC,CAACL,YAAY,CAACQ,IAAI,CAACC,SAAS,CAAC;IAClC;EACJ;EAEQH,eAAeA,CAACP,IAAY;IAChC,IAAIW,OAAO,GAAGC,SAAS;IAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,gBAAgB,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MACnD,MAAME,OAAO,GAAG,IAAI,CAACZ,gBAAgB,CAACU,CAAC,CAAC;MACxC,IAAIE,OAAO,CAACf,IAAI,KAAKA,IAAI,EAAE;QACvBW,OAAO,GAAGI,OAAO;QACjB;MACJ;IACJ;IACA,OAAOJ,OAAO;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}