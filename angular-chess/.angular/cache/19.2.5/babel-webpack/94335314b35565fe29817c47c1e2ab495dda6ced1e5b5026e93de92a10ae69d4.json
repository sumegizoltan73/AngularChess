{"ast":null,"code":"import { ChessBase } from \"./chess-base.\";\nimport { Figure } from \"./chess-figure\";\nexport class FigureKing extends Figure {\n  constructor(color) {\n    super('king', color, 2, 1);\n    this.isMoved = false;\n  }\n  isStepPossible(step) {\n    let _retVal = false;\n    if (this.isCoordsNotEquals(step)) {\n      if (this.isDistancePossible(step)) {\n        const isCastling = this.isCastling(step);\n        if (this.isOneCellStep(step) || isCastling) {\n          if (this.isStepNotBlocked(step) || isCastling) {\n            if (this.isStepNotBlockedByEnemyKnightRange(step)) {\n              _retVal = true;\n            }\n          }\n        }\n      }\n    }\n    return _retVal;\n  }\n  isOrigPosition(step) {\n    return !this.isMoved && (this.color === 'white' && step.from.y === 7 && step.from.x === 4 || this.color === 'black' && step.from.y === 0 && step.from.x === 4);\n  }\n  getRange(x, y) {\n    let _retVal = [];\n    // current row\n    if (x > 0) {\n      _retVal.push({\n        x: x - 1,\n        y: y\n      });\n    }\n    if (x < 7) {\n      _retVal.push({\n        x: x + 1,\n        y: y\n      });\n    }\n    // under\n    if (this.color === 'white' && y < 7 || this.color === 'black' && y > 0) {\n      const u = this.color === 'white' ? y + 1 : y - 1;\n      if (x > 0) {\n        _retVal.push({\n          x: x - 1,\n          y: u\n        });\n      }\n      _retVal.push({\n        x: x,\n        y: u\n      });\n      if (x < 7) {\n        _retVal.push({\n          x: x + 1,\n          y: u\n        });\n      }\n    }\n    // above\n    if (this.color === 'white' && y > 0 || this.color === 'black' && y < 7) {\n      const a = this.color === 'white' ? y - 1 : y + 1;\n      if (x > 0) {\n        _retVal.push({\n          x: x - 1,\n          y: a\n        });\n      }\n      _retVal.push({\n        x: x,\n        y: a\n      });\n      if (x < 7) {\n        _retVal.push({\n          x: x + 1,\n          y: a\n        });\n      }\n    }\n    return _retVal;\n  }\n  isCastling(step) {\n    // orig_pos && castling\n    let _retVal = false;\n    if (this.isOrigPosition(step)) {\n      const stepOffset = Math.abs(step.to.x - step.from.x);\n      const rookOffset = step.to.x > step.from.x ? 1 : -1;\n      const rookX = step.from.x + rookOffset;\n      const fig = ChessBase.instance.getFigure(rookX, step.from.y);\n      if (stepOffset === 2 && fig && fig.name === 'rook' && fig.color === this.color) {\n        _retVal = true;\n      }\n    }\n    return _retVal;\n  }\n  isStepNotBlockedByEnemyKnightRange(step) {\n    let _retVal = true;\n    const enemyColor = this.color === 'white' ? 'black' : 'white';\n    const cell = ChessBase.instance.getKingWithCell(enemyColor);\n    if (Math.abs(cell.x - step.to.x) <= 1 && Math.abs(cell.y - step.to.y) <= 1) {\n      _retVal = false;\n    }\n    return _retVal;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}