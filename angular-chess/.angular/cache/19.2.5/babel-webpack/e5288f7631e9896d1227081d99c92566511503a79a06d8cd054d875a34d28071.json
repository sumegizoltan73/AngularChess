{"ast":null,"code":"import _asyncToGenerator from \"/Users/sumegizoltan/github/_uj/AngularChess/angular-chess/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChessBase } from './chess-base.';\nimport { ChessFactory } from './chess.factory';\nimport './chess.helpers';\nimport { io } from 'socket.io-client';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = (a0, a1) => ({\n  \"white\": a0,\n  \"black\": a1\n});\nconst _c1 = a0 => ({\n  \"active\": a0\n});\nconst _c2 = a0 => ({\n  \"left\": a0\n});\nfunction ChessComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.infoToBlack);\n  }\n}\nfunction ChessComponent_div_8_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_8_span_1_Template_span_click_0_listener() {\n      const ctx_r2 = i0.ɵɵrestoreView(_r2);\n      const name_r4 = ctx_r2.$implicit;\n      const i_r5 = ctx_r2.index;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onPromotionClick(name_r4, i_r5));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r4 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classNameOfPromotion(name_r4, \"white\"));\n  }\n}\nfunction ChessComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, ChessComponent_div_8_span_1_Template, 1, 1, \"span\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.whitePromotionList);\n  }\n}\nfunction ChessComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r6 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", col_r6, \" \");\n  }\n}\nfunction ChessComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 22);\n  }\n}\nfunction ChessComponent_tr_15_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 24);\n    i0.ɵɵlistener(\"click\", function ChessComponent_tr_15_td_3_Template_td_click_0_listener() {\n      const j_r8 = i0.ɵɵrestoreView(_r7).index;\n      const i_r9 = i0.ɵɵnextContext().index;\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onCellClick(j_r8, i_r9));\n    });\n    i0.ɵɵelement(1, \"span\", 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const j_r8 = ctx.index;\n    const i_r9 = i0.ɵɵnextContext().index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, ctx_r0.isCellWhite(j_r8, i_r9), !ctx_r0.isCellWhite(j_r8, i_r9)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classNameOfFigure(j_r8, i_r9));\n  }\n}\nfunction ChessComponent_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ChessComponent_tr_15_td_3_Template, 2, 5, \"td\", 23);\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const row_r10 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(row_r10);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.x);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(row_r10);\n  }\n}\nfunction ChessComponent_td_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r11 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", col_r11, \" \");\n  }\n}\nfunction ChessComponent_div_20_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_20_span_1_Template_span_click_0_listener() {\n      const ctx_r12 = i0.ɵɵrestoreView(_r12);\n      const name_r14 = ctx_r12.$implicit;\n      const i_r15 = ctx_r12.index;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onPromotionClick(name_r14, i_r15));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r14 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classNameOfPromotion(name_r14, \"black\"));\n  }\n}\nfunction ChessComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, ChessComponent_div_20_span_1_Template, 1, 1, \"span\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.blackPromotionList);\n  }\n}\nfunction ChessComponent_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.infoToWhite);\n  }\n}\nfunction ChessComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"White, Black\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_span_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Viewer\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_div_43_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 34)(1, \"input\", 35);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_43_div_2_div_2_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.roomNameForCreate, $event) || (ctx_r0.roomNameForCreate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_43_div_2_div_2_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onCreateGameClick());\n    });\n    i0.ɵɵtext(3, \" Create Game \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.roomNameForCreate);\n  }\n}\nfunction ChessComponent_div_43_div_2_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 37);\n    i0.ɵɵtext(1, \"offline\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_div_43_div_2_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 38);\n    i0.ɵɵtext(1, \"online\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_div_43_div_2_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" Room: \", ctx_r0.roomNameForCreate, \", PIN: \", ctx_r0.PINForJoin, \" \");\n  }\n}\nfunction ChessComponent_div_43_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 29);\n    i0.ɵɵtemplate(2, ChessComponent_div_43_div_2_div_2_Template, 4, 1, \"div\", 30);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4, \" Local gamer: \");\n    i0.ɵɵelementStart(5, \"b\");\n    i0.ɵɵtext(6, \"white\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \", Remote gamer: \");\n    i0.ɵɵelementStart(8, \"b\");\n    i0.ɵɵtext(9, \"black\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \" - \");\n    i0.ɵɵtemplate(11, ChessComponent_div_43_div_2_span_11_Template, 2, 0, \"span\", 31)(12, ChessComponent_div_43_div_2_span_12_Template, 2, 0, \"span\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtemplate(14, ChessComponent_div_43_div_2_span_14_Template, 2, 2, \"span\", 33);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isRoomCreated);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isBlackGamerJoined);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isBlackGamerJoined);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isRoomCreated);\n  }\n}\nfunction ChessComponent_div_43_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 34)(2, \"input\", 40);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_43_div_3_div_2_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.roomNameForJoin, $event) || (ctx_r0.roomNameForJoin = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 41);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_43_div_3_div_2_Template_input_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.PINForJoin, $event) || (ctx_r0.PINForJoin = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_43_div_3_div_2_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onJoinAsGamerClick());\n    });\n    i0.ɵɵtext(5, \" Join as Gamer \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_43_div_3_div_2_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onJoinAsViewerClick());\n    });\n    i0.ɵɵtext(7, \" Join as Viewer \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.roomNameForJoin);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.PINForJoin);\n  }\n}\nfunction ChessComponent_div_43_div_3_div_3_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 37);\n    i0.ɵɵtext(1, \" We are waiting for the black player to join... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_div_43_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\");\n    i0.ɵɵtext(2, \" Local gamer: \");\n    i0.ɵɵelementStart(3, \"b\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \", Remote gamer: \");\n    i0.ɵɵelementStart(6, \"b\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵtemplate(9, ChessComponent_div_43_div_3_div_3_span_9_Template, 2, 0, \"span\", 31);\n    i0.ɵɵelement(10, \"br\");\n    i0.ɵɵelementStart(11, \"span\", 39);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.isViewerJoined ? \"-\" : \"black\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.isViewerJoined ? \"white, black\" : \"white\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isStarted && ctx_r0.isViewerJoined);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" Room: \", ctx_r0.roomNameForJoin, \", PIN: \", ctx_r0.PINForJoin, \" \");\n  }\n}\nfunction ChessComponent_div_43_div_3_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 37);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.joinMsg, \" \");\n  }\n}\nfunction ChessComponent_div_43_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 29);\n    i0.ɵɵtemplate(2, ChessComponent_div_43_div_3_div_2_Template, 8, 2, \"div\", 4)(3, ChessComponent_div_43_div_3_div_3_Template, 13, 5, \"div\", 4)(4, ChessComponent_div_43_div_3_span_4_Template, 2, 1, \"span\", 31);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.isStarted || ctx_r0.isJoinDisabled));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isStarted || ctx_r0.isViewerJoined);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.joinMsg);\n  }\n}\nfunction ChessComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 11);\n    i0.ɵɵtemplate(2, ChessComponent_div_43_div_2_Template, 15, 4, \"div\", 27)(3, ChessComponent_div_43_div_3_Template, 5, 3, \"div\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isMultiplayerCreateOptionsDisabled);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isMultiplayerJoinOptionsDisabled);\n  }\n}\nfunction ChessComponent_div_44_div_2_li_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 48);\n  }\n  if (rf & 2) {\n    const step_r18 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngClass\", \"white \" + step_r18.white.figure);\n  }\n}\nfunction ChessComponent_div_44_div_2_li_5_span_4_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 48);\n  }\n  if (rf & 2) {\n    const step_r18 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"ngClass\", \"black \" + step_r18.black.figure);\n  }\n}\nfunction ChessComponent_div_44_div_2_li_5_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 49);\n    i0.ɵɵtemplate(1, ChessComponent_div_44_div_2_li_5_span_4_span_1_Template, 1, 1, \"span\", 46);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const step_r18 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", step_r18.black == null ? null : step_r18.black.figure);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", step_r18.black.notation || \"\", \" \");\n  }\n}\nfunction ChessComponent_div_44_div_2_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtemplate(2, ChessComponent_div_44_div_2_li_5_span_2_Template, 1, 1, \"span\", 46);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, ChessComponent_div_44_div_2_li_5_span_4_Template, 3, 2, \"span\", 47);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const step_r18 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", step_r18.white.figure);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", step_r18.white.notation, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", step_r18.black);\n  }\n}\nfunction ChessComponent_div_44_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 44)(2, \"h5\", 45);\n    i0.ɵɵtext(3, \"Step notation\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ol\");\n    i0.ɵɵtemplate(5, ChessComponent_div_44_div_2_li_5_Template, 5, 3, \"li\", 7);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.steps);\n  }\n}\nfunction ChessComponent_div_44_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onLoadGameClick());\n    });\n    i0.ɵɵtext(2, \" Load \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_5_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onSaveGameClick());\n    });\n    i0.ɵɵtext(4, \" Save \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChessComponent_div_44_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 34)(2, \"input\", 52);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_44_div_6_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.nameForSave, $event) || (ctx_r0.nameForSave = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 53);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_6_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onSaveClick());\n    });\n    i0.ɵɵtext(4, \" Save \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.nameForSave);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.nameForSave);\n  }\n}\nfunction ChessComponent_div_44_div_7_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 58);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_7_button_3_Template_button_click_0_listener() {\n      const i_r23 = i0.ɵɵrestoreView(_r22).index;\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onSelectGameClick(i_r23));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 59);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = ctx.$implicit;\n    const i_r23 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, i_r23 === ctx_r0.selectedItemForLoad));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r24.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" - \", item_r24.date, \"\");\n  }\n}\nfunction ChessComponent_div_44_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 54)(2, \"div\", 55);\n    i0.ɵɵtemplate(3, ChessComponent_div_44_div_7_button_3_Template, 4, 5, \"button\", 56);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 57);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_7_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onLoadClick());\n    });\n    i0.ɵɵtext(5, \" Load \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.gameList);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.isGameSelectedForLoad);\n  }\n}\nfunction ChessComponent_div_44_div_9_span_7_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 48);\n  }\n  if (rf & 2) {\n    const msg_r26 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngClass\", msg_r26.player + \" king\");\n  }\n}\nfunction ChessComponent_div_44_div_9_span_7_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 69);\n    i0.ɵɵtext(1, \"[viewer]\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChessComponent_div_44_div_9_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵtemplate(1, ChessComponent_div_44_div_9_span_7_span_1_Template, 1, 1, \"span\", 46)(2, ChessComponent_div_44_div_9_span_7_span_2_Template, 2, 0, \"span\", 66);\n    i0.ɵɵelementStart(3, \"span\", 67);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 68);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c2, msg_r26.isOwnMessage));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", msg_r26.player);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !msg_r26.player);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(msg_r26.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(msg_r26.message);\n  }\n}\nfunction ChessComponent_div_44_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 29)(2, \"h5\", 45);\n    i0.ɵɵtext(3, \"Chat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 34)(5, \"input\", 60);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_44_div_9_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.nameForChat, $event) || (ctx_r0.nameForChat = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 61);\n    i0.ɵɵtemplate(7, ChessComponent_div_44_div_9_span_7_Template, 7, 7, \"span\", 62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 34)(9, \"input\", 63);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChessComponent_div_44_div_9_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      i0.ɵɵtwoWayBindingSet(ctx_r0.messageForChat, $event) || (ctx_r0.messageForChat = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 64);\n    i0.ɵɵlistener(\"click\", function ChessComponent_div_44_div_9_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onSendMessageClick());\n    });\n    i0.ɵɵtext(11, \" Send \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.nameForChat);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.chatMessages);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.messageForChat);\n  }\n}\nfunction ChessComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 10);\n    i0.ɵɵtemplate(2, ChessComponent_div_44_div_2_Template, 6, 1, \"div\", 27);\n    i0.ɵɵelementStart(3, \"div\", 28)(4, \"div\", 29);\n    i0.ɵɵtemplate(5, ChessComponent_div_44_div_5_Template, 5, 0, \"div\", 4)(6, ChessComponent_div_44_div_6_Template, 5, 2, \"div\", 4)(7, ChessComponent_div_44_div_7_Template, 6, 2, \"div\", 4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"div\", 10);\n    i0.ɵɵtemplate(9, ChessComponent_div_44_div_9_Template, 12, 3, \"div\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoadDetailVisible);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSaveAndLoadVisible);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSaveDetailVisible);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isLoadDetailVisible);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isMultiPlayer);\n  }\n}\nexport class StepDetail {\n  constructor(step, additionalStep, fig, isStrike = false, isCheck = false, isCheckMate = false, isShowFromX = false, isShowFromY = false) {\n    this.step = step;\n    this.additionalStep = additionalStep;\n    this.fig = fig;\n    this.isStrike = isStrike;\n    this.isCheck = isCheck;\n    this.isCheckMate = isCheckMate;\n    this.isShowFromX = isShowFromX;\n    this.isShowFromY = isShowFromY;\n    this.x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    this.y = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    if (this.additionalStep) {\n      this.isShowFromX = false;\n      this.isShowFromY = false;\n    }\n  }\n  get figure() {\n    let _retVal = this.fig;\n    if (this.fig === 'pawn') {\n      _retVal = '';\n    } else if (this.additionalStep) {\n      _retVal = 'king';\n    }\n    return _retVal;\n  }\n  get castling() {\n    let _retVal = '';\n    if (this.additionalStep) {\n      _retVal = this.additionalStep.to?.x === 6 ? ' 0-0' : ' 0-0-0';\n    }\n    return _retVal;\n  }\n  get notation() {\n    let _retVal = '';\n    if (!this.figure && this.isStrike || this.isShowFromX || this.isShowFromY) {\n      _retVal += this.step ? this.x[this.step.from.x] : '';\n    }\n    if (this.isShowFromY) {\n      _retVal += this.step ? this.y[this.step.from.y] : '';\n    }\n    if (this.isStrike) {\n      _retVal += 'x';\n    }\n    _retVal += this.step ? this.x[this.step.to.x] : '';\n    _retVal += this.step ? this.y[this.step.to.y] : '';\n    _retVal += this.castling;\n    if (!this.isCheckMate && this.isCheck) {\n      _retVal += '+';\n    }\n    if (this.isCheckMate) {\n      _retVal += '#';\n    }\n    return _retVal;\n  }\n}\nexport let ChessComponent = /*#__PURE__*/(() => {\n  class ChessComponent {\n    constructor(_localStorage) {\n      this._localStorage = _localStorage;\n      this.x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n      this.y = ['8', '7', '6', '5', '4', '3', '2', '1'];\n      this.msg = '';\n      this.joinMsg = '';\n      this.roomNameForCreate = '';\n      this.roomNameForJoin = '';\n      this.PINForJoin = '';\n      this.nameForChat = '';\n      this.messageForChat = '';\n      this.nameForSave = '';\n      this.steps = [];\n      this.chatMessages = [];\n      this.gameList = [];\n      this.isWhiteNext = true;\n      this.isClickedFrom = true;\n      this.step = {\n        from: null,\n        to: null\n      };\n      this.isGameStarted = false;\n      this.isSinglePlayerGame = true;\n      this.isMultiPlayerGameCreated = false;\n      this.isMultiPlayerRoomCreated = false;\n      this.isRemoteBlackGamerJoined = false;\n      this.isJoinedAsGamer = false;\n      this.isJoinedAsViewer = false;\n      this.localGamers = ['white', 'black'];\n      this.socketId = '';\n      this.isSaveGameEnabled = false;\n      this.isLoadGameEnabled = false;\n      this.isLocaleLoaded = false;\n      this.gameListSelectedItem = -1;\n      this.chessBase = ChessBase.instance;\n      this.chessBase.events.subscribe('stepFinished', eventArgs => {\n        this.onStep(eventArgs);\n      });\n      this.chessBase.events.subscribe('stepIllegal', () => {\n        this.clearStep();\n      });\n      this.chessBase.events.subscribe('promotionFinished', () => {\n        this.onPromotion();\n      });\n      this.chessBase.events.subscribe('checkmate', () => {\n        this.onCheckMate();\n      });\n      this.chessBase.events.subscribe('resign', () => {\n        this.onResign();\n      });\n      this.fillBoard();\n      this.socket = io(environment.SOCKET_ENDPOINT, {\n        transports: [\"polling\", \"websocket\"]\n      });\n      this.socket.on('game-created', PIN => {\n        if (PIN) {\n          this.isMultiPlayerRoomCreated = true;\n          this.PINForJoin = PIN;\n        }\n      });\n      this.socket.on('gamer-joined', () => {\n        this.isGameStarted = true;\n        if (this.localGamers.includes('white')) {\n          this.isRemoteBlackGamerJoined = true;\n        }\n        this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n      });\n      this.socket.on('viewer-joined', isStarted => {\n        this.isGameStarted = isStarted;\n      });\n      this.socket.on('id', (socketId, isBoardChanged) => {\n        this.socketId = socketId;\n        if (isBoardChanged) {\n          this.socket.emit('get-board', this.roomNameForJoin, this.PINForJoin, this.socketId);\n        }\n      });\n      this.socket.on('get-board-to', socketId => {\n        if (this.colorOfLocalGamer === 'White') {\n          this.socket.emit('board', this.roomNameForCreate, this.PINForJoin, socketId, this.chessBase.board, this.steps, this.colorOfNext, this.isWhiteResigned, this.isBlackResigned);\n        }\n      });\n      this.socket.on('board-to', (board, steps, colorOfNext, isWhiteResigned, isBlackResigned) => {\n        this.onSyncronize(board, steps, colorOfNext, isWhiteResigned, isBlackResigned);\n      });\n      this.socket.on('board-to-all', (board, steps, colorOfNext, isWhiteResigned, isBlackResigned) => {\n        if (!this.isLocaleLoaded) {\n          this.onSyncronize(board, steps, colorOfNext, isWhiteResigned, isBlackResigned);\n        }\n        this.isLocaleLoaded = false;\n      });\n      this.socket.on('invalid-room', () => {\n        this.isJoinedAsGamer = false;\n        this.isJoinedAsViewer = false;\n        this.localGamers = ['white', 'black'];\n        this.joinMsg = 'Invalid room or PIN!';\n      });\n      this.socket.on('invalid-gamer', () => {\n        this.isJoinedAsGamer = false;\n        this.localGamers = ['white', 'black'];\n        this.joinMsg = 'Invalid gamer! (All players have already joined this room.)';\n      });\n      this.socket.on('step-to', eventArgs => {\n        if (!this.localGamers.includes(eventArgs.color)) {\n          this.chessBase.stepFromRemote(eventArgs.step, eventArgs.enPassant);\n          if ('additionalStep' in eventArgs) {\n            this.chessBase.stepFromRemote(eventArgs.additionalStep, null);\n          }\n          if (eventArgs.state && eventArgs.state === 'pawn_promotion') {\n            this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next. We are waiting for the pawn to convert.';\n          } else {\n            this.isWhiteNext = !this.isWhiteNext;\n            this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n            // test check, checkmate, dead position, stalemate\n            if (this.isCheckToWhite || this.isCheckToBlack) {\n              this.chessBase.testCheckForRemote(eventArgs.color);\n            }\n            this.chessBase.processCombinatedTests(this.colorOfNext);\n          }\n          this.setStepNotation(eventArgs);\n        }\n      });\n      this.socket.on('pawn-converted', (name, color, step) => {\n        if (!this.localGamers.includes(color)) {\n          this.chessBase.convertPawnFromRemote(name, color, step);\n          this.isWhiteNext = !this.isWhiteNext;\n          this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n          // test check, checkmate, dead position, stalemate\n          this.chessBase.processCombinatedTests(this.colorOfNext);\n        }\n      });\n      this.socket.on('message-sended', (player, name, socketId, message) => {\n        const chatmessage = {\n          player: player,\n          name: name,\n          message: message,\n          isOwnMessage: this.socketId === socketId\n        };\n        this.chatMessages.push(chatmessage);\n      });\n    }\n    get colorOfNext() {\n      return this.isWhiteNext ? 'white' : 'black';\n    }\n    get isNextLocalGamer() {\n      return this.localGamers.includes(this.colorOfNext);\n    }\n    get colorOfWinner() {\n      return this.isCheckMateToWhite || this.isWhiteResigned ? 'black' : this.isCheckMateToBlack || this.isBlackResigned ? 'white' : '';\n    }\n    get colorOfLocalGamer() {\n      let _retVal = '';\n      if (this.isMultiPlayer && (this.isJoinedAsGamer || this.isMultiPlayerGameCreated)) {\n        _retVal = this.localGamers[0].toUpperCaseFirstLetter();\n      }\n      return _retVal;\n    }\n    get isCheckToWhite() {\n      return this.chessBase.isCheckToWhite;\n    }\n    get isCheckToBlack() {\n      return this.chessBase.isCheckToBlack;\n    }\n    get isCheckMateToWhite() {\n      return this.chessBase.isCheckMateToWhite;\n    }\n    get isCheckMateToBlack() {\n      return this.chessBase.isCheckMateToBlack;\n    }\n    get isWhiteResigned() {\n      return this.chessBase.isWhiteResigned;\n    }\n    get isBlackResigned() {\n      return this.chessBase.isBlackResigned;\n    }\n    get isExistsInfoToWhite() {\n      return this.isCheckToWhite || this.isCheckMateToWhite || this.isWhiteResigned;\n    }\n    get isExistsInfoToBlack() {\n      return this.isCheckToBlack || this.isCheckMateToBlack || this.isBlackResigned;\n    }\n    get infoToWhite() {\n      let _retVal = '';\n      if (this.isCheckMateToWhite) {\n        _retVal = 'Checkmate!';\n      } else if (this.isCheckToWhite) {\n        _retVal = 'Check!';\n      } else if (this.isWhiteResigned) {\n        _retVal = 'Resigned!';\n      }\n      return _retVal;\n    }\n    get infoToBlack() {\n      let _retVal = '';\n      if (this.isCheckMateToBlack) {\n        _retVal = 'Checkmate!';\n      } else if (this.isCheckToBlack) {\n        _retVal = 'Check!';\n      } else if (this.isBlackResigned) {\n        _retVal = 'Resigned!';\n      }\n      return _retVal;\n    }\n    get isGameEnded() {\n      // checkmate || resigning\n      return this.isCheckMateToWhite || this.isCheckMateToBlack || this.isWhiteResigned || this.isBlackResigned;\n    }\n    get isStarted() {\n      return this.isGameStarted;\n    }\n    get isWhiteResignDisabled() {\n      return !this.localGamers.includes('white');\n    }\n    get isBlackResignDisabled() {\n      return !this.localGamers.includes('black');\n    }\n    get isSinglePlayer() {\n      return this.isSinglePlayerGame;\n    }\n    set isSinglePlayer(value) {\n      if (this.isSinglePlayerGame != value) {\n        this.isSinglePlayerGame = value;\n      }\n    }\n    get isMultiPlayer() {\n      return !this.isSinglePlayerGame;\n    }\n    get isPlayerModeSelectionDisabled() {\n      return this.isMultiPlayerGameCreated || this.isMultiplayerCreateOptionsDisabled;\n    }\n    get isMultiplayerJoinOptionsDisabled() {\n      return this.isMultiPlayerGameCreated;\n    }\n    get isMultiplayerCreateOptionsDisabled() {\n      return this.isJoinedAsGamer || this.isJoinedAsViewer;\n    }\n    get isJoinDisabled() {\n      return this.isJoinedAsGamer || this.isJoinedAsViewer;\n    }\n    get isViewerJoined() {\n      return this.isJoinedAsViewer;\n    }\n    get isRoomCreated() {\n      return this.isMultiPlayerRoomCreated;\n    }\n    get isBlackGamerJoined() {\n      return this.isRemoteBlackGamerJoined;\n    }\n    get isPromoteWhite() {\n      return this.chessBase.isPawnPromotionWhite;\n    }\n    get isPromoteBlack() {\n      return this.chessBase.isPawnPromotionBlack;\n    }\n    get isLoaderVisible() {\n      return this.chessBase.isLoaderVisible;\n    }\n    get isTestInProgress() {\n      return this.chessBase.isTestInProgress;\n    }\n    get blackPromotionList() {\n      return this.chessBase.blackPromotionList;\n    }\n    get whitePromotionList() {\n      return this.chessBase.whitePromotionList;\n    }\n    get isSaveDetailVisible() {\n      return this.isSaveGameEnabled;\n    }\n    get isLoadDetailVisible() {\n      return this.isLoadGameEnabled;\n    }\n    get isSaveAndLoadVisible() {\n      return !(this.isSaveDetailVisible || this.isLoadDetailVisible);\n    }\n    get isGameSelectedForLoad() {\n      return this.gameListSelectedItem > -1;\n    }\n    get selectedItemForLoad() {\n      return this.gameListSelectedItem;\n    }\n    ngOnInit() {}\n    onBeforeUnload($event) {\n      this.ngOnDestroy();\n      $event.preventDefault();\n      delete $event['returnValue'];\n    }\n    ngOnDestroy() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.isMultiPlayer) {\n          _this.msg = 'Disconnecting...';\n        }\n      })();\n    }\n    onCellClick(x, y) {\n      const isStepEnabled = this.isStarted && this.isNextLocalGamer || this.isSinglePlayer;\n      if (!(this.isPromoteWhite || this.isPromoteBlack || this.isTestInProgress || this.isGameEnded) && isStepEnabled) {\n        if (this.isClickedFrom) {\n          this.setFrom(x, y);\n        } else {\n          this.setTo(x, y);\n        }\n      }\n    }\n    onPromotionClick(name, i) {\n      const color = this.isPromoteWhite ? 'white' : 'black';\n      if (this.isMultiPlayer && this.localGamers.includes(color)) {\n        const roomName = color === 'white' ? this.roomNameForCreate : this.roomNameForJoin;\n        this.socket.emit('convert-pawn', roomName, this.PINForJoin, name, color, this.step);\n      }\n      this.chessBase.convertPawn(name, color, this.step, i);\n    }\n    onResignClick(color) {\n      this.chessBase.resign(color);\n    }\n    onCreateGameClick() {\n      if (!this.isMultiPlayerGameCreated && this.roomNameForCreate) {\n        this.isMultiPlayerGameCreated = true;\n        const i = this.localGamers.indexOf('black');\n        this.localGamers.splice(i, 1);\n        this.socket.emit('start-game', this.roomNameForCreate);\n      }\n    }\n    onJoinAsGamerClick() {\n      if (!(this.isJoinedAsGamer || this.isJoinedAsViewer) && this.roomNameForJoin && this.PINForJoin && this.PINForJoin.length === 4) {\n        this.isJoinedAsGamer = true;\n        this.joinMsg = '';\n        const i = this.localGamers.indexOf('white');\n        this.localGamers.splice(i, 1);\n        this.socket.emit('join', this.roomNameForJoin, this.PINForJoin, false);\n      }\n    }\n    onJoinAsViewerClick() {\n      if (!(this.isJoinedAsGamer || this.isJoinedAsViewer) && this.roomNameForJoin && this.PINForJoin && this.PINForJoin.length === 4) {\n        this.isJoinedAsViewer = true;\n        this.joinMsg = '';\n        this.localGamers = [];\n        this.socket.emit('join', this.roomNameForJoin, this.PINForJoin, true);\n      }\n    }\n    onSendMessageClick() {\n      const roomName = this.roomNameForCreate ? this.roomNameForCreate : this.roomNameForJoin;\n      this.socket.emit('message', roomName, this.PINForJoin, this.colorOfLocalGamer.toLowerCaseFirstLetter(), this.nameForChat, this.socketId, this.messageForChat);\n      this.messageForChat = '';\n    }\n    onSaveGameClick() {\n      this.nameForSave = '';\n      this.isSaveGameEnabled = true;\n    }\n    onLoadGameClick() {\n      this.gameList = this._localStorage.getList();\n      this.gameListSelectedItem = -1;\n      this.isLoadGameEnabled = true;\n    }\n    onSaveClick() {\n      // save\n      const data = {\n        board: this.chessBase.board,\n        steps: this.steps,\n        next: this.colorOfNext,\n        isWhiteResigned: this.isWhiteResigned,\n        isBlackResigned: this.isBlackResigned,\n        date: new Date().toJSON().slice(0, 16).replace('T', ' ')\n      };\n      this._localStorage.setItem(this.nameForSave, data);\n      this.isSaveGameEnabled = false;\n    }\n    onLoadClick() {\n      const name = this.gameList[this.gameListSelectedItem].name;\n      const data = this._localStorage.loadItem(name);\n      if (data) {\n        this.onSyncronize(data.board, data.steps, data.next, data.isWhiteResigned, data.isBlackResigned);\n        if (this.isMultiPlayer) {\n          this.isLocaleLoaded = true;\n          const roomName = this.roomNameForCreate ? this.roomNameForCreate : this.roomNameForJoin;\n          this.socket.emit('board-loaded', roomName, this.PINForJoin, this.chessBase.board, this.steps, this.colorOfNext, this.isWhiteResigned, this.isBlackResigned);\n        }\n      }\n      this.isLoadGameEnabled = false;\n    }\n    onSelectGameClick(i) {\n      this.gameListSelectedItem = i;\n    }\n    gameModeChange(e) {\n      this.isSinglePlayerGame = e.target.id === 'singlePlayer';\n    }\n    isCellWhite(x, y) {\n      // board colorize\n      return x % 2 === 0 && y % 2 === 0 || x % 2 !== 0 && y % 2 !== 0;\n    }\n    colorOfFigure(x, y) {\n      const fig = this.getFigure(x, y);\n      return fig ? fig.color : \"\";\n    }\n    classNameOfFigure(x, y) {\n      const fig = this.getFigure(x, y);\n      return fig ? fig.color + \" \" + fig.name : \"\";\n    }\n    classNameOfPromotion(name, color) {\n      return color + \" \" + name;\n    }\n    clearStep() {\n      this.msg = 'This step is illegal! ' + this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n      this.step = {\n        from: null,\n        to: null\n      };\n      this.isClickedFrom = !this.isClickedFrom;\n    }\n    onStep(eventArgs) {\n      // TODO: add step to list\n      if (eventArgs && eventArgs.state === 'pawn_promotion') {\n        this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next. Convert the pawn to another!';\n      } else {\n        this.step = {\n          from: null,\n          to: null\n        };\n        this.isClickedFrom = !this.isClickedFrom;\n        this.isWhiteNext = !this.isWhiteNext;\n        this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n        // test check, checkmate, dead position, stalemate\n        this.chessBase.processCombinatedTests(this.colorOfNext);\n      }\n      this.setStepNotation(eventArgs);\n      if (eventArgs && this.isMultiPlayer && this.localGamers.includes(eventArgs.color)) {\n        const roomName = eventArgs.color === 'white' ? this.roomNameForCreate : this.roomNameForJoin;\n        this.socket.emit('step', roomName, this.PINForJoin, eventArgs);\n      }\n    }\n    setStepNotation(eventArgs) {\n      if (eventArgs) {\n        if (eventArgs.color === 'white') {\n          // new notation\n          const item = {\n            white: new StepDetail(eventArgs.step, eventArgs.additionalStep ? eventArgs.additionalStep : null, eventArgs.fig, eventArgs.strike, this.isCheckToBlack, this.isCheckMateToBlack, this.getShowFromX(eventArgs.fig, 'white', eventArgs.step), this.getShowFromY(eventArgs.fig, 'white', eventArgs.step)),\n            black: null\n          };\n          this.steps.push(item);\n        } else {\n          // last notation\n          const item = this.steps[this.steps.length - 1];\n          item.black = new StepDetail(eventArgs.step, eventArgs.additionalStep ? eventArgs.additionalStep : null, eventArgs.fig, eventArgs.strike, this.isCheckToWhite, this.isCheckMateToWhite, this.getShowFromX(eventArgs.fig, 'black', eventArgs.step), this.getShowFromY(eventArgs.fig, 'black', eventArgs.step));\n        }\n      } else {\n        const item = this.steps[this.steps.length - 1];\n        if (this.isWhiteNext) {\n          // set black\n          item.black.isCheck = this.isCheckToBlack;\n          item.black.isCheckMate = this.isCheckMateToBlack;\n        } else {\n          // set white\n          item.white.isCheck = this.isCheckToWhite;\n          item.white.isCheckMate = this.isCheckMateToWhite;\n        }\n      }\n    }\n    getShowFromX(figure, color, step) {\n      let _retVal = false;\n      if (figure === 'rook') {\n        if (step.from?.y === step.to?.y) {\n          for (let i = 0; i < 8; i++) {\n            if (i !== step.from?.x && i !== step.to?.x) {\n              const fig = this.chessBase.getFigure(i, step.from.y);\n              if (fig && fig.name === 'rook' && fig.color === color) {\n                _retVal = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n      return _retVal;\n    }\n    getShowFromY(figure, color, step) {\n      let _retVal = false;\n      if (figure === 'rook') {\n        if (step.from?.x === step.to?.x) {\n          for (let i = 0; i < 8; i++) {\n            if (i !== step.from?.y && i !== step.to?.y) {\n              const fig = this.chessBase.getFigure(step.from.x, i);\n              if (fig && fig.name === 'rook' && fig.color === color) {\n                _retVal = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n      return _retVal;\n    }\n    onSyncronize(board, steps, colorOfNext, isWhiteResigned, isBlackResigned) {\n      this.syncronizeBoard(board);\n      this.syncronizeSteps(steps);\n      this.isWhiteNext = colorOfNext === 'white';\n      if (isWhiteResigned || isBlackResigned) {\n        const color = isWhiteResigned ? 'white' : 'black';\n        this.onResignClick(color);\n      } else {\n        this.chessBase.processCombinatedTests(this.colorOfNext);\n        this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n      }\n    }\n    onPromotion() {\n      this.onStep(null);\n    }\n    onCheckMate() {\n      this.msg = 'Checkmate. ' + this.colorOfWinner.toUpperCaseFirstLetter() + ' won!';\n    }\n    onResign() {\n      const resignedColor = this.isWhiteResigned ? 'white' : 'black';\n      this.msg = resignedColor.toUpperCaseFirstLetter() + ' resigned. ' + this.colorOfWinner.toUpperCaseFirstLetter() + ' won!';\n    }\n    getFigure(x, y) {\n      return this.chessBase.getFigure(x, y);\n    }\n    setFrom(x, y) {\n      const fig = this.getFigure(x, y);\n      if (fig && fig.color === this.colorOfNext) {\n        if (!this.isStarted) {\n          this.isGameStarted = true;\n        }\n        this.isClickedFrom = !this.isClickedFrom;\n        this.step.from = {\n          x: x,\n          y: y\n        };\n        this.msg = this.colorOfNext.toUpperCaseFirstLetter() + ': Click the next cell!';\n      } else {\n        this.msg = 'This step is illegal! ' + this.colorOfNext.toUpperCaseFirstLetter() + ' is next.';\n      }\n    }\n    setTo(x, y) {\n      this.step.to = {\n        x: x,\n        y: y\n      };\n      const chessBase = ChessBase.instance;\n      chessBase.stepAwayIfPossible(this.step);\n    }\n    syncronizeBoard(board) {\n      this.chessBase.board = [];\n      for (let i = 0; i < board.length; i++) {\n        const element = board[i];\n        if (element.figure?.name) {\n          ChessFactory.createFigure(element.figure.name, element.figure.color, element.x, element.y);\n        }\n      }\n    }\n    syncronizeSteps(steps) {\n      this.steps = [];\n      for (let i = 0; i < steps.length; i++) {\n        const element = steps[i];\n        const item = {\n          white: new StepDetail(element.white.step, element.white.additionalStep, element.white.fig, element.white.isStrike, element.white.isCheck, element.white.isCheckMate, element.white.isShowFromX, element.white.isShowFromY),\n          black: null\n        };\n        if (element.black) {\n          item.black = new StepDetail(element.black.step, element.black.additionalStep, element.black.fig, element.black.isStrike, element.black.isCheck, element.black.isCheckMate, element.black.isShowFromX, element.black.isShowFromY);\n        }\n        this.steps.push(item);\n      }\n    }\n    fillBoard() {\n      //init white figures\n      for (let i = 0; i < this.x.length; i++) {\n        const element = this.x[i];\n        // row 2 - Pawn\n        ChessFactory.createFigure(\"pawn\", \"white\", i, 8 - 2);\n        // row 1\n        if (element === 'a' || element === 'h') {\n          // Rook\n          ChessFactory.createFigure(\"rook\", \"white\", i, 8 - 1);\n        } else if (element === 'b' || element === 'g') {\n          // Knight\n          ChessFactory.createFigure(\"knight\", \"white\", i, 8 - 1);\n        } else if (element === 'c' || element === 'f') {\n          // Bishop\n          ChessFactory.createFigure(\"bishop\", \"white\", i, 8 - 1);\n        } else if (element === 'd') {\n          // Queen\n          ChessFactory.createFigure(\"queen\", \"white\", i, 8 - 1);\n        } else if (element === 'e') {\n          // King\n          ChessFactory.createFigure(\"king\", \"white\", i, 8 - 1);\n        }\n      }\n      //init black figures\n      for (let i = 0; i < this.x.length; i++) {\n        const element = this.x[i];\n        // row 7 - Pawn\n        ChessFactory.createFigure(\"pawn\", \"black\", i, 8 - 7);\n        // row 8\n        if (element === 'a' || element === 'h') {\n          // Rook\n          ChessFactory.createFigure(\"rook\", \"black\", i, 8 - 8);\n        } else if (element === 'b' || element === 'g') {\n          // Knight\n          ChessFactory.createFigure(\"knight\", \"black\", i, 8 - 8);\n        } else if (element === 'c' || element === 'f') {\n          // Bishop\n          ChessFactory.createFigure(\"bishop\", \"black\", i, 8 - 8);\n        } else if (element === 'd') {\n          // Queen\n          ChessFactory.createFigure(\"queen\", \"black\", i, 8 - 8);\n        } else if (element === 'e') {\n          // King\n          ChessFactory.createFigure(\"king\", \"black\", i, 8 - 8);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function ChessComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ChessComponent)(i0.ɵɵdirectiveInject(i1.LocalStorageService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChessComponent,\n        selectors: [[\"app-chess\"]],\n        hostBindings: function ChessComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"beforeunload\", function ChessComponent_beforeunload_HostBindingHandler($event) {\n              return ctx.onBeforeUnload($event);\n            }, false, i0.ɵɵresolveWindow);\n          }\n        },\n        standalone: false,\n        decls: 45,\n        vars: 18,\n        consts: [[1, \"container\"], [1, \"row\"], [1, \"col-12\", \"col-xl-6\", \"board-div\"], [1, \"check-info\"], [4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", \"btn-resign\", 3, \"click\", \"disabled\"], [\"class\", \"promotion-list\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"loader\", 4, \"ngIf\"], [\"class\", \"promotion-list promotion-black\", 4, \"ngIf\"], [1, \"col-12\", \"col-md-6\"], [1, \"col\"], [\"role\", \"group\", \"aria-label\", \"Basic radio toggle button group\", 1, \"btn-group\"], [\"type\", \"radio\", \"name\", \"btnradio\", \"id\", \"singlePlayer\", \"autocomplete\", \"off\", \"checked\", \"\", 1, \"btn-check\", 3, \"change\", \"disabled\"], [\"for\", \"singlePlayer\", 1, \"btn\", \"btn-outline-primary\"], [\"type\", \"radio\", \"name\", \"btnradio\", \"id\", \"multiPlayer\", \"autocomplete\", \"off\", 1, \"btn-check\", 3, \"change\", \"disabled\"], [\"for\", \"multiPlayer\", 1, \"btn\", \"btn-outline-primary\"], [1, \"gamer-info\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"promotion-list\"], [\"class\", \"chess-icons\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"chess-icons\", 3, \"click\", \"ngClass\"], [1, \"loader\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\", \"ngClass\"], [1, \"chess-icons\", 3, \"ngClass\"], [1, \"promotion-list\", \"promotion-black\"], [\"class\", \"card\", 4, \"ngIf\"], [1, \"card\"], [1, \"card-body\"], [\"class\", \"input-group\", 4, \"ngIf\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [\"style\", \"color: green;\", 4, \"ngIf\"], [\"class\", \"multiplayer-info\", 4, \"ngIf\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Name of Room\", \"aria-label\", \"Room\", \"aria-describedby\", \"button-create\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", \"id\", \"button-create\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [2, \"color\", \"red\"], [2, \"color\", \"green\"], [1, \"multiplayer-info\"], [\"type\", \"text\", \"placeholder\", \"Name of Room\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"text\", \"placeholder\", \"PIN for Room\", \"mask\", \"0000\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", \"id\", \"button-join-gamer\", 1, \"btn\", \"btn-outline-secondary\", \"btn-join\", 3, \"click\"], [\"type\", \"button\", \"id\", \"button-join-viewer\", 1, \"btn\", \"btn-outline-secondary\", \"btn-join\", 3, \"click\"], [1, \"card-body\", \"steps\"], [1, \"card-title\"], [\"class\", \"chess-icons s16\", 3, \"ngClass\", 4, \"ngIf\"], [\"style\", \"margin-left: 20px;\", 4, \"ngIf\"], [1, \"chess-icons\", \"s16\", 3, \"ngClass\"], [2, \"margin-left\", \"20px\"], [\"type\", \"button\", \"id\", \"button-load-game\", 1, \"btn\", \"btn-outline-secondary\", 2, \"margin-right\", \"15px\", 3, \"click\"], [\"type\", \"button\", \"id\", \"button-save-game\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [\"type\", \"text\", \"placeholder\", \"Name of Game\", \"aria-label\", \"Name\", \"aria-describedby\", \"button-save\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", \"id\", \"button-save\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\", \"disabled\"], [1, \"game-list\"], [1, \"list-group\"], [\"type\", \"button\", \"class\", \"list-group-item list-group-item-action\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"id\", \"button-load\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\", \"disabled\"], [\"type\", \"button\", 1, \"list-group-item\", \"list-group-item-action\", 3, \"click\", \"ngClass\"], [1, \"bold\"], [\"type\", \"text\", \"placeholder\", \"Name for Chat\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"chat\"], [\"class\", \"chat-message\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Message\", \"aria-label\", \"Message\", \"aria-describedby\", \"button-send-message\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", \"id\", \"button-send-message\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"chat-message\", 3, \"ngClass\"], [\"class\", \"viewer-icon\", 4, \"ngIf\"], [1, \"name\"], [1, \"msg\"], [1, \"viewer-icon\"]],\n        template: function ChessComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n            i0.ɵɵtext(4, \" \\u00A0 \");\n            i0.ɵɵtemplate(5, ChessComponent_span_5_Template, 2, 1, \"span\", 4);\n            i0.ɵɵelementStart(6, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function ChessComponent_Template_button_click_6_listener() {\n              return ctx.onResignClick(\"black\");\n            });\n            i0.ɵɵtext(7, \" Resign \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(8, ChessComponent_div_8_Template, 2, 1, \"div\", 6);\n            i0.ɵɵelementStart(9, \"table\")(10, \"tr\");\n            i0.ɵɵelement(11, \"th\");\n            i0.ɵɵtemplate(12, ChessComponent_th_12_Template, 2, 1, \"th\", 7);\n            i0.ɵɵelementStart(13, \"th\");\n            i0.ɵɵtemplate(14, ChessComponent_div_14_Template, 1, 0, \"div\", 8);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(15, ChessComponent_tr_15_Template, 6, 3, \"tr\", 7);\n            i0.ɵɵelementStart(16, \"tr\");\n            i0.ɵɵelement(17, \"td\");\n            i0.ɵɵtemplate(18, ChessComponent_td_18_Template, 2, 1, \"td\", 7);\n            i0.ɵɵelement(19, \"td\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(20, ChessComponent_div_20_Template, 2, 1, \"div\", 9);\n            i0.ɵɵelementStart(21, \"div\", 3);\n            i0.ɵɵtext(22, \" \\u00A0 \");\n            i0.ɵɵtemplate(23, ChessComponent_span_23_Template, 2, 1, \"span\", 4);\n            i0.ɵɵelementStart(24, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function ChessComponent_Template_button_click_24_listener() {\n              return ctx.onResignClick(\"white\");\n            });\n            i0.ɵɵtext(25, \" Resign \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(26, \"p\");\n            i0.ɵɵtext(27);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(28, \"div\", 10)(29, \"div\", 1)(30, \"div\", 11)(31, \"div\", 12)(32, \"input\", 13);\n            i0.ɵɵlistener(\"change\", function ChessComponent_Template_input_change_32_listener($event) {\n              return ctx.gameModeChange($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(33, \"label\", 14);\n            i0.ɵɵtext(34, \"Single player\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(35, \"input\", 15);\n            i0.ɵɵlistener(\"change\", function ChessComponent_Template_input_change_35_listener($event) {\n              return ctx.gameModeChange($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"label\", 16);\n            i0.ɵɵtext(37, \"Multi player\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(38, \"div\", 17);\n            i0.ɵɵtemplate(39, ChessComponent_span_39_Template, 2, 0, \"span\", 4);\n            i0.ɵɵelementStart(40, \"span\");\n            i0.ɵɵtext(41);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(42, ChessComponent_span_42_Template, 2, 0, \"span\", 4);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(43, ChessComponent_div_43_Template, 4, 2, \"div\", 18)(44, ChessComponent_div_44_Template, 10, 5, \"div\", 18);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ctx.isExistsInfoToBlack);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.isGameEnded || ctx.isBlackResignDisabled);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.isPromoteWhite);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.x);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoaderVisible);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.y);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.x);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.isPromoteBlack);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.isExistsInfoToWhite);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.isGameEnded || ctx.isWhiteResignDisabled);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate(ctx.msg);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", ctx.isStarted || ctx.isPlayerModeSelectionDisabled);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", ctx.isStarted || ctx.isPlayerModeSelectionDisabled);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.isStarted && ctx.isSinglePlayer);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.colorOfLocalGamer);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isViewerJoined);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isMultiPlayer);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isStarted);\n          }\n        },\n        dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n        styles: [\"table[_ngcontent-%COMP%]{border-collapse:collapse}td[_ngcontent-%COMP%], th[_ngcontent-%COMP%]{border:1px solid lightgray;width:3rem;height:3rem;text-align:center;vertical-align:middle;font-weight:700}td.white[_ngcontent-%COMP%]{background-color:#ffaa80}td.black[_ngcontent-%COMP%]{background-color:#c40}span.chess-icons[_ngcontent-%COMP%]{display:block;width:95%;height:95%;background-size:contain;background-repeat:no-repeat}span.chess-icons.white.rook[_ngcontent-%COMP%]{background-image:url(Chess_rlt45.50b3900a0b1a986d.svg)}span.chess-icons.white.knight[_ngcontent-%COMP%]{background-image:url(Chess_nlt45.49b0e8ebc703eeec.svg)}span.chess-icons.white.bishop[_ngcontent-%COMP%]{background-image:url(Chess_blt45.c05bd61478b98ef1.svg)}span.chess-icons.white.queen[_ngcontent-%COMP%]{background-image:url(Chess_qlt45.9302ef5efa6abee0.svg)}span.chess-icons.white.king[_ngcontent-%COMP%]{background-image:url(Chess_klt45.b4417cb3b039e0a0.svg)}span.chess-icons.white.pawn[_ngcontent-%COMP%]{background-image:url(Chess_plt45.c737daafd9af0284.svg)}span.chess-icons.black.rook[_ngcontent-%COMP%]{background-image:url(Chess_rdt45.ea888ca94605d837.svg)}span.chess-icons.black.knight[_ngcontent-%COMP%]{background-image:url(Chess_ndt45.81b96414f65c73c1.svg)}span.chess-icons.black.bishop[_ngcontent-%COMP%]{background-image:url(Chess_bdt45.b20aa14d4224a45c.svg)}span.chess-icons.black.queen[_ngcontent-%COMP%]{background-image:url(Chess_qdt45.07b03f89d4ad1612.svg)}span.chess-icons.black.king[_ngcontent-%COMP%]{background-image:url(Chess_kdt45.450ddba8a67e0cbb.svg)}span.chess-icons.black.pawn[_ngcontent-%COMP%]{background-image:url(Chess_pdt45.261917351df1d849.svg)}div.check-info[_ngcontent-%COMP%]{color:red;font-weight:700;font-size:14px;width:30rem;max-width:100%;text-align:right}.btn-resign[_ngcontent-%COMP%]{margin:5px}.btn-join[_ngcontent-%COMP%]{margin-top:10px;margin-right:10px}.multiplayer-info[_ngcontent-%COMP%]{margin:10px;font-weight:700}.gamer-info[_ngcontent-%COMP%]{float:right;font-size:16px;font-weight:700}.promotion-list[_ngcontent-%COMP%]{position:absolute;background-color:bisque}.promotion-black[_ngcontent-%COMP%]{position:relative;top:-50px;display:inline-block}.promotion-list[_ngcontent-%COMP%]   span.chess-icons[_ngcontent-%COMP%]{display:inline-block;margin-right:20px}.steps[_ngcontent-%COMP%], .chat[_ngcontent-%COMP%], .game-list[_ngcontent-%COMP%]{height:20rem;overflow-y:auto}span.chess-icons.s16[_ngcontent-%COMP%]{display:inline-block;width:20px;height:20px;background-size:contain}.game-list[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   span.bold[_ngcontent-%COMP%]{font-weight:700}.chat[_ngcontent-%COMP%]   .chat-message[_ngcontent-%COMP%]{display:block;float:right;text-align:right;clear:both;margin-left:30px;margin-right:0}.chat[_ngcontent-%COMP%]   .chat-message.left[_ngcontent-%COMP%]{float:left;text-align:left;margin-left:0;margin-right:30px}.chat[_ngcontent-%COMP%]   .chat-message[_ngcontent-%COMP%]   .name[_ngcontent-%COMP%]{margin-left:10px;font-weight:700}.chat[_ngcontent-%COMP%]   .chat-message[_ngcontent-%COMP%]   .viewer-icon[_ngcontent-%COMP%]{font-weight:700}.chat[_ngcontent-%COMP%]   .chat-message[_ngcontent-%COMP%]   .msg[_ngcontent-%COMP%]{border:solid 1px gray;background-color:#f2f2f2;border-radius:5px}.chat[_ngcontent-%COMP%]   .chat-message.left[_ngcontent-%COMP%]   .msg[_ngcontent-%COMP%]{border:solid 1px darkblue;background-color:#b3c6ff;color:#00008b}.loader[_ngcontent-%COMP%]{border:5px solid #f3f3f3;border-radius:50%;border-top:5px solid #3498db;width:20px;height:20px;animation:_ngcontent-%COMP%_spin 2s linear infinite}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"]\n      });\n    }\n  }\n  return ChessComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}